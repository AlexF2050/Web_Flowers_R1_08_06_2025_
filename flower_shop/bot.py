import os
import sys
import django

############################ 08 06 2025
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è bot.py)
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å settings.py (–≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–∫–µ—Ç Django)
sys.path.append(os.path.join(BASE_DIR, "flower_shop"))  # –ï—Å–ª–∏ settings.py –≤ flower_shop/

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "flower_shop.settings")
django.setup()  # –¢–µ–ø–µ—Ä—å Django –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
############################ 08 06 2025

import platform
from PIL import Image, ImageDraw, ImageFont
import tempfile

django.setup()

from aiogram import Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from asgiref.sync import sync_to_async
from orders.models import Order
from django.contrib.auth import get_user_model

import asyncio

import logging
from aiogram import Bot
from django.conf import settings
from django.core.exceptions import ImproperlyConfigured
from django.utils import timezone
from decimal import Decimal

if platform.system() == 'Windows':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

User = get_user_model()
logger = logging.getLogger(__name__)

STATUS_MAPPING = {
    "üÜï –ó–∞–∫–∞–∑–∞–Ω–æ": "ordered",
    "üîß –°–æ–±–∏—Ä–∞–µ—Ç—Å—è": "in_assemble",
    "‚úÖ –°–æ–±—Ä–∞–Ω–æ": "assembled",
    "üöö –ï–¥–µ—Ç": "in_delivery - –ï–¥–µ—Ç",
    "üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ": "delivered",
    "‚ùå –û—Ç–º–µ–Ω–µ–Ω": "canceled",
}

def split_text(text: str, max_length: int = 4096) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ max_length —Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—è —Å—Ç—Ä–æ–∫–∏."""
    parts = []
    while text:
        if len(text) <= max_length:
            parts.append(text)
            break
        part = text[:max_length]
        split_at = part.rfind('\n') or part.rfind(' ')
        if split_at == -1:
            split_at = max_length
        parts.append(text[:split_at])
        text = text[split_at:].lstrip()
    return parts

class OrderStatus(StatesGroup):
    waiting_for_status = State()
    waiting_for_order_id = State()

bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/orders - –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
/status - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ü–æ–º–æ—â—å
"""
    await message.answer(help_text)

@dp.message_handler(commands=['status'])
async def status_command(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for status in STATUS_MAPPING.keys():
        keyboard.add(status)
    await OrderStatus.waiting_for_status.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:", reply_markup=keyboard)

@dp.message_handler(state=OrderStatus.waiting_for_status)
async def process_status(message: types.Message, state: FSMContext):
    if message.text not in STATUS_MAPPING:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return

    await state.update_data(status=STATUS_MAPPING[message.text])
    await OrderStatus.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(state=OrderStatus.waiting_for_order_id)
async def process_order_id(message: types.Message, state: FSMContext):
    try:
        order_id = int(message.text)
        data = await state.get_data()
        status = data['status']

        order = await sync_to_async(Order.objects.get)(id=order_id)
        order.status = status
        await sync_to_async(order.save)()

        await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status}")
    except Order.DoesNotExist:
        await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")
    finally:
        await state.finish()

@dp.message_handler(commands=['orders'])
async def handle_all_active_orders(message: types.Message):
    """–í—ã–≤–æ–¥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∏ –û—Ç–º–µ–Ω–µ–Ω–æ)"""
    try:
        orders = await sync_to_async(list)(
            Order.objects.exclude(status__in=['delivered', 'canceled'])
                .select_related('user')
                .prefetch_related('cartitem_set__product')  # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
                .order_by('-order_date')
        )

        if not orders:
            await message.answer("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")
            return

        response = ["*üìå –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:*\n"]

        for order in orders:
            delivery_date = order.delivery_date.strftime('%d.%m.%Y %H:%M') if order.delivery_date else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            status = order.get_status_display()
            username = order.user.username if order.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            phone = order.user.phone if order.user and order.user.phone else "–ù–µ —É–∫–∞–∑–∞–Ω"
            address = order.user.address if order.user and order.user.address else "–ù–µ —É–∫–∞–∑–∞–Ω"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
            items = await sync_to_async(list)(order.cartitem_set.all())
            order_items = []
            for item in items:
                item_total = item.product.price * item.quantity
                order_items.append(
                    f"‚Ä¢ {item.product.name}\n"
                    f"  {item.quantity} √ó {item.product.price} ‚ÇΩ = {item_total} ‚ÇΩ"
                )

            order_info = [
                f"*üÜî –ó–∞–∫–∞–∑* `#{order.id}`",
                f"*üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:* {order.order_date.strftime('%d.%m.%Y %H:%M')}",
                f"*üì¶ –ü–ª–∞–Ω –¥–æ—Å—Ç–∞–≤–∫–∏:* {delivery_date}",
                f"*üöö –°—Ç–∞—Ç—É—Å:* {status}",
                f"*üíµ –°—É–º–º–∞:* {order.total_price} ‚ÇΩ",
                f"*üë§ –ö–ª–∏–µ–Ω—Ç:* {username}",
                f"*üì± –¢–µ–ª–µ—Ñ–æ–Ω:* {phone}",
                f"üì± *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* {order.address}",
                f"\n*üì¶ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n" + "\n".join(order_items) if order_items else "*üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞*"
            ]

            response.extend(order_info)
            response.append("\n‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨\n")

        full_text = "\n".join(response)
        for part in split_text(full_text):
            await message.answer(part, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")

async def on_startup(dp):
    await bot.set_my_commands([
        types.BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        types.BotCommand("orders", "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"),
        types.BotCommand("help", "–ü–æ–º–æ—â—å"),
        types.BotCommand("status", "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"),
        types.BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º")
    ])
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

def start_bot():
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

if __name__ == "__main__":
    start_bot()


# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def add_caption_to_image(image_path, caption):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—å —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"""
    try:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –≤ 2 —Ä–∞–∑–∞
        font_size = 40  # –ë—ã–ª–æ 20
        padding = 20  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        line_spacing = 10

        # –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É –Ω–∞ –≤–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ
        try:
            font = ImageFont.truetype("arial.ttf", font_size)
        except IOError:
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —à—Ä–∏—Ñ—Ç—É –µ—Å–ª–∏ arial –Ω–µ –Ω–∞–π–¥–µ–Ω
            font = ImageFont.load_default()

        with Image.open(image_path) as img:
            img_width, img_height = img.size

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            temp_draw = ImageDraw.Draw(img)

            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–Ω–æ—Å–∞
            lines = []
            for line in caption.split('\n'):
                current_line = []
                for word in line.split():
                    current_line.append(word)
                    test_line = ' '.join(current_line)
                    text_width = temp_draw.textlength(test_line, font=font)
                    if text_width > img_width - 2 * padding:
                        lines.append(' '.join(current_line[:-1]))
                        current_line = [word]
                lines.append(' '.join(current_line))

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
            text_height = (font_size + line_spacing) * len(lines) + 2 * padding

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            new_height = img_height + text_height
            new_img = Image.new("RGB", (img_width, new_height), (255, 255, 255))
            new_img.paste(img, (0, 0))

            draw = ImageDraw.Draw(new_img)

            # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º
            y_position = img_height + padding
            for line in lines:
                text_width = draw.textlength(line, font=font)
                x_position = (img_width - text_width) / 2  # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
                draw.text(
                    (x_position, y_position),
                    line,
                    fill=(0, 0, 0),
                    font=font,
                    stroke_width=1,
                    stroke_fill=(255, 255, 255)
                )
                y_position += font_size + line_spacing

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            fd, temp_path = tempfile.mkstemp(suffix='.jpg')
            new_img.save(temp_path, quality=95)
            os.close(fd)

            return temp_path

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        return image_path

async def get_order_media_items(order):
    try:
        items = await sync_to_async(list)(order.cartitem_set.all())
        media_items = []

        for idx, item in enumerate(items, 1):
            product = await sync_to_async(lambda: item.product)()
            if not product.image:
                continue

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            relative_path = await sync_to_async(lambda: product.image.name)()
            absolute_path = os.path.join(settings.MEDIA_ROOT, relative_path)
            absolute_path = os.path.normpath(absolute_path)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            if not await sync_to_async(os.path.exists)(absolute_path):
                continue

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
            total_items = len(items)
            caption = (
                f"–¢–æ–≤–∞—Ä {idx}/{total_items}\n"
                f"{product.name}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity} √ó {product.price}‚ÇΩ"
            )

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            processed_path = await add_caption_to_image(absolute_path, caption)

            media_items.append({
                'path': processed_path,
                'is_temp': processed_path != absolute_path
            })

        return media_items

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞: {str(e)}")
        return []

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ —Å–µ—Å—Å–∏–∏
bot_instance = Bot(token=settings.TELEGRAM_BOT_TOKEN)

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—Ä–∞–ø–ø–µ—Ä
def sync_send_notification(order):
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(send_telegram_notification(order))
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        loop.run_until_complete(bot_instance.close())
        loop.close()

# –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_telegram_notification
async def send_telegram_notification(order):
    check_telegram_settings()

    try:
        message = await format_order_message(order)

        for chat_id in settings.TELEGRAM_ADMIN_CHAT_IDS:
            media_items = await get_order_media_items(order)
            try:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–£–ë–†–ê–ù –ü–ê–†–ê–ú–ï–¢–† SESSION)
                for part in split_text(message):
                    await bot_instance.send_message(
                        chat_id=chat_id,
                        text=part,
                        parse_mode="Markdown"
                    )

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ (–£–ë–†–ê–ù –ü–ê–†–ê–ú–ï–¢–† SESSION)
                if media_items:
                    for item in media_items:
                        try:
                            with open(item['path'], 'rb') as photo:
                                await bot_instance.send_photo(
                                    chat_id=chat_id,
                                    photo=photo,
                                    parse_mode="Markdown"
                                )
                        finally:
                            if item.get('is_temp', False):
                                await sync_to_async(os.remove)(item['path'])

                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
                if media_items:
                    for item in media_items:
                        if item.get('is_temp', False) and await sync_to_async(os.path.exists)(item['path']):
                            await sync_to_async(os.remove)(item['path'])

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)

async def format_order_message(order):
    # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º
    async_localtime = sync_to_async(timezone.localtime)
    async_strftime = sync_to_async(lambda dt: dt.strftime('%d.%m.%Y %H:%M'))

    # –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    order_date = await async_localtime(order.order_date)
    delivery_date = await async_localtime(order.delivery_date)

    items = await sync_to_async(list)(order.cartitem_set.all())

    order_items = []
    for item in items:
        product = await sync_to_async(lambda: item.product)()
        item_total = product.price * item.quantity
        order_items.append(
            f"‚Ä¢ *{product.name}*\n"
            f"  {item.quantity} √ó {product.price} ‚ÇΩ = {item_total} ‚ÇΩ"
        )

    user = await sync_to_async(lambda: order.user)()
    phone = await sync_to_async(lambda: user.phone if user.phone else "–ù–µ —É–∫–∞–∑–∞–Ω")()
    address = await sync_to_async(lambda: user.address if user.address else "–ù–µ —É–∫–∞–∑–∞–Ω")()

    return (
            "üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
            f"üÜî *#{order.id}*\n"
            f"üìÖ *–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:* {await async_strftime(order_date)}\n"
            f"üì¶ *–ü–ª–∞–Ω –¥–æ—Å—Ç–∞–≤–∫–∏:* {await async_strftime(delivery_date)}\n"
            f"üíµ *–°—É–º–º–∞:* {order.total_price} ‚ÇΩ\n"
            f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {user.username}\n"
            f"üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
            f"üì¶ *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* {order.address}\n\n"
            "*–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:*\n" + "\n".join(order_items)
    )

def check_telegram_settings():
    required = [
        ('TELEGRAM_BOT_TOKEN', settings.TELEGRAM_BOT_TOKEN),
        ('TELEGRAM_ADMIN_CHAT_IDS', settings.TELEGRAM_ADMIN_CHAT_IDS)
    ]

    for name, value in required:
        if not value:
            raise ImproperlyConfigured(f"–ù–µ –∑–∞–¥–∞–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ {name}")

    logger.debug(f"Telegram chat IDs: {settings.TELEGRAM_ADMIN_CHAT_IDS}")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats —á–µ—Ä–µ–∑ aiogram
@dp.message_handler(commands=['stats'])
async def stats_command(message: types.Message):
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ORM
    async_get_stats = sync_to_async(Order.get_stats, thread_sensitive=True)
    async_localtime = sync_to_async(timezone.localtime)
    async_strftime = sync_to_async(lambda dt: dt.strftime('%d.%m.%Y %H:%M'))

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        stats = await async_get_stats()
        now = await async_localtime()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        today_str = await async_strftime(now)
        week_number = now.isocalendar()[1]
        current_year = now.year

        # –°–ª–æ–≤–∞—Ä—å —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤
        months_ru = [
            '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å',
            '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç',
            '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
        ]
        month_name_ru = months_ru[now.month - 1]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤*\n\n"

            f"*–°–µ–≥–æ–¥–Ω—è ({today_str})*\n"
            f"–ó–∞–∫–∞–∑–æ–≤: {stats['today']['total_orders'] or 0} / "
            f"–°—É–º–º–∞: {stats['today']['total_amount'] or 0} ‚ÇΩ\n"
            f"‚ñ™ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats['today']['avg_check'].quantize(Decimal('1.00')) if stats['today']['avg_check'] else 0} ‚ÇΩ\n"
            f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤—Å–µ–≥–æ: {stats['today']['delivered_total']}\n"
            f"–ò–∑ –Ω–∏—Ö –≤–æ–≤—Ä–µ–º—è: {stats['today']['delivered_on_time']}\n"
            f"‚ñ™ –ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ–≤—Ä–µ–º—è: {(stats['today']['delivered_on_time'] / stats['today']['delivered_total'] * 100 if stats['today']['delivered_total'] > 0 else 0):.1f}%\n\n"

            f"*–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è (–Ω–µ–¥–µ–ª—è ‚Ññ{week_number})*\n"
            f"–ó–∞–∫–∞–∑–æ–≤: {stats['week']['total_orders'] or 0} / "
            f"–°—É–º–º–∞: {stats['week']['total_amount'] or 0} ‚ÇΩ\n"
            f"‚ñ™ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats['week']['avg_check'].quantize(Decimal('1.00')) if stats['week']['avg_check'] else 0} ‚ÇΩ\n"
            f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤—Å–µ–≥–æ: {stats['week']['delivered_total']}\n"
            f"–ò–∑ –Ω–∏—Ö –≤–æ–≤—Ä–µ–º—è: {stats['week']['delivered_on_time']}\n"
            f"‚ñ™ –ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ–≤—Ä–µ–º—è: {(stats['week']['delivered_on_time'] / stats['week']['delivered_total'] * 100 if stats['week']['delivered_total'] > 0 else 0):.1f}%\n"
            f"–ü—Ä–æ—à–ª—ã–π –≥–æ–¥: {stats['last_year_week']['total_orders'] or 0} / "
            f"{stats['last_year_week']['total_amount'] or 0} ‚ÇΩ\n\n"

            f"*–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü ({month_name_ru})*\n"
            f"–ó–∞–∫–∞–∑–æ–≤: {stats['month']['total_orders'] or 0} / "
            f"–°—É–º–º–∞: {stats['month']['total_amount'] or 0} ‚ÇΩ\n"
            f"‚ñ™ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats['month']['avg_check'].quantize(Decimal('1.00')) if stats['month']['avg_check'] else 0} ‚ÇΩ\n"
            f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤—Å–µ–≥–æ: {stats['month']['delivered_total']}\n"
            f"–ò–∑ –Ω–∏—Ö –≤–æ–≤—Ä–µ–º—è: {stats['month']['delivered_on_time']}\n"
            f"‚ñ™ –ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ–≤—Ä–µ–º—è: {(stats['month']['delivered_on_time'] / stats['month']['delivered_total'] * 100 if stats['month']['delivered_total'] > 0 else 0):.1f}%\n"
            f"–ü—Ä–æ—à–ª—ã–π –≥–æ–¥: {stats['last_year_month']['total_orders'] or 0} / "
            f"{stats['last_year_month']['total_amount'] or 0} ‚ÇΩ\n\n"

            f"*–¢–µ–∫—É—â–∏–π –≥–æ–¥ ({current_year})*\n"
            f"–ó–∞–∫–∞–∑–æ–≤: {stats['year']['total_orders'] or 0} / "
            f"–°—É–º–º–∞: {stats['year']['total_amount'] or 0} ‚ÇΩ\n"
            f"‚ñ™ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats['year']['avg_check'].quantize(Decimal('1.00')) if stats['year']['avg_check'] else 0} ‚ÇΩ\n"
            f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤—Å–µ–≥–æ: {stats['year']['delivered_total']}\n"
            f"–ò–∑ –Ω–∏—Ö –≤–æ–≤—Ä–µ–º—è: {stats['year']['delivered_on_time']}\n"
            f"‚ñ™ –ü—Ä–æ—Ü–µ–Ω—Ç –≤–æ–≤—Ä–µ–º—è: {(stats['year']['delivered_on_time'] / stats['year']['delivered_total'] * 100 if stats['year']['delivered_total'] > 0 else 0):.1f}%\n"
            f"–ü—Ä–æ—à–ª—ã–π –≥–æ–¥: {stats['last_year']['total_orders'] or 0} / "
            f"{stats['last_year']['total_amount'] or 0} ‚ÇΩ"
        )

        await message.answer(response, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

import atexit

@atexit.register
def cleanup():
    try:
        loop = asyncio.new_event_loop()
        loop.run_until_complete(bot_instance.close())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±–æ—Ç–∞: {str(e)}")