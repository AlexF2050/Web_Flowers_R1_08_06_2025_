from django.views.decorators.csrf import csrf_exempt
from django.conf import settings
import requests
from django.http import JsonResponse
from django.views.decorators.http import require_POST
from django.db.models import Count
from django.db.models import Avg
from catalog.models import Review
from django.shortcuts import render
from catalog.models import Product  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à—É –º–æ–¥–µ–ª—å –ø—Ä–æ–¥—É–∫—Ç–∞


def header(request):
    return render(request, 'header.html')

def footer(request):
    return render(request, 'footer.html')

@csrf_exempt
@require_POST
def send_callback(request):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        phone = request.POST.get('phone', '').strip()
        city = request.POST.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω').strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if not phone:
            return JsonResponse({'status': 'error', 'message': '–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}, status=400)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram
        if not all([settings.TELEGRAM_BOT_TOKEN, settings.TELEGRAM_ADMIN_CHAT_ID]):
            raise ValueError("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            "üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫!\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üèô –ì–æ—Ä–æ–¥: {city}\n"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        response = requests.post(
            f'https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage',
            json={
                'chat_id': settings.TELEGRAM_ADMIN_CHAT_ID,
                'text': message,
                'parse_mode': 'Markdown'
            },
            timeout=5
        )

        response.raise_for_status()
        return JsonResponse({'status': 'ok'})

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {str(e)}")
        return JsonResponse({
            'status': 'error',
            'message': '–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º Telegram'
        }, status=500)

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        return JsonResponse({
            'status': 'error',
            'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }, status=500)

def home(request):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–∏–Ω–∫–∏ (–ø—Ä–æ–¥—É–∫—Ç—ã —Å is_new=True)
    new_products = Product.objects.filter(is_new=True)

    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    reviews_stats = Review.objects.aggregate(
        avg_rating=Avg('rating'),
        total=Count('id')
    )

    context = {
        'new_products': new_products,
        'average_rating': round(reviews_stats['avg_rating'] or 0, 1),
        'reviews_count': reviews_stats['total']
    }
    return render(request, 'home.html', context)


def get_reviews(request):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤
    reviews = Review.objects.select_related('user', 'product').all().order_by('-created_at')

    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
    reviews_data = []
    for review in reviews:
        reviews_data.append({
            'user': review.user.username,
            'product': review.product.name,
            'text': review.text,
            'rating': review.rating,
            'date': review.created_at.strftime("%d.%m.%Y %H:%M")
        })

    return JsonResponse({'reviews': reviews_data})

def main_page(request):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–∏–Ω–∫–∏ (–ø—Ä–æ–¥—É–∫—Ç—ã —Å is_new=True)
    new_products = Product.objects.filter(is_new=True)

    # –ü–µ—Ä–µ–¥–∞–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞
    context = {
        'new_products': new_products,
        # –î—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...
        'average_rating': 4.5  # –ü—Ä–∏–º–µ—Ä, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    }
    return render(request, 'home.html', context)