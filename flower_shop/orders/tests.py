import logging
from django.test import TestCase, override_settings
from django.urls import reverse
from django.core.files.uploadedfile import SimpleUploadedFile
from unittest.mock import patch, ANY
from hypothesis import given, strategies as st, settings
from hypothesis.extra.django import TestCase as HypTestCase
from django.apps import apps
from django.utils import timezone
from PIL import Image, ImageDraw
import io
from django.db import transaction

img = Image.new('RGB', (450, 450), color='white')
draw = ImageDraw.Draw(img)
draw.text((10, 10), "üìä", fill='black')  # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã
img_byte_arr = io.BytesIO()
img.save(img_byte_arr, format='JPEG')
img_bytes = img_byte_arr.getvalue()

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.DEBUG)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ apps.get_model –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–∏–≥—Ä–∞—Ü–∏–π
Order = apps.get_model('orders', 'Order')
Cart = apps.get_model('orders', 'Cart')
CartItem = apps.get_model('orders', 'CartItem')
Product = apps.get_model('catalog', 'Product')
CustomUser = apps.get_model('users', 'CustomUser')


@override_settings(ROOT_URLCONF='flower_shop.flower_shop.urls')
class OrderProcessingTests(TestCase):
    """–¢–µ—Å—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""

    def setUp(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user = CustomUser.objects.create_user(
            username="testuser",
            password="testpass",
            phone="+79991234567",
            address="Test Address",
            email="x123@ctmol.ru"
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        self.product = Product.objects.create(
            name="Test Product",
            price=1000,
            quantity=10,
            image=SimpleUploadedFile('TestOrders.jpg', img_bytes, 'image/jpeg')
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.cart = Cart.objects.create(user=self.user)
        CartItem.objects.create(cart=self.cart, product=self.product, quantity=2)

    def test_successful_order_creation(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π CSRF"""
        self.client.force_login(self.user)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –≤–∞–ª–∏–¥–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º (–º–∏–Ω–∏–º—É–º +2 —á–∞—Å–∞)
        delivery_time = timezone.localtime() + timezone.timedelta(hours=3)
        formatted_time = delivery_time.strftime('%Y-%m-%dT%H:%M')

        # –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        response = self.client.post(
            reverse('orders:checkout'),
            data={
                'delivery_date': formatted_time,
                'use_profile_address': False,  # –ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
                'address': 'New Test Address'
            },
            follow=True
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        self.assertEqual(response.status_code, 200)
        self.assertEqual(Order.objects.count(), 1)
        order = Order.objects.first()
        self.assertEqual(order.user, self.user)
        self.assertEqual(order.address, 'New Test Address')

@override_settings(ROOT_URLCONF='flower_shop.flower_shop.urls')
class PaymentIntegrationTests(TestCase):
    @patch('orders.views.send_telegram_notification')
    def test_notification_sending(self, mock_notification):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        user = CustomUser.objects.create_user(
            username="tguser",
            password="testpass",
            phone="+79991234567",
            address="Valid Address",
            email="x123@ctmol.ru"
        )

        product = Product.objects.create(
            name="TG Product",
            price=2000,
            quantity=5,
            image=SimpleUploadedFile('TestOrders.jpg', img_bytes, 'image/jpeg')
        )

        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        cart = Cart.objects.create(user=user)
        CartItem.objects.create(cart=cart, product=product, quantity=1)

        # 3. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        self.client.force_login(user)
        delivery_time = timezone.localtime() + timezone.timedelta(hours=3)
        response = self.client.post(
            reverse('orders:checkout'),
            data={
                'delivery_date': delivery_time.strftime('%Y-%m-%dT%H:%M'),
                'use_profile_address': True
            },
            follow=True
        )

        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        self.assertEqual(Order.objects.count(), 1, "–ó–∞–∫–∞–∑ –Ω–µ —Å–æ–∑–¥–∞–Ω")
        order = Order.objects.first()

        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞ –≤–º–µ—Å—Ç–æ order_id –∏ user_id
        mock_notification.assert_called_once_with(order)

@override_settings(ROOT_URLCONF='flower_shop.flower_shop.urls')
class OrderHypothesisTests(HypTestCase):
    """Property-based —Ç–µ—Å—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Hypothesis"""

    @given(
        quantity=st.integers(min_value=1, max_value=5),
        price=st.integers(min_value=100, max_value=10000)
    )
    @settings(max_examples=10, deadline=None)  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

    def test_order_creation_with_various_values(self, quantity, price):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        with transaction.atomic():
            user = CustomUser.objects.create_user(
            username=f"hypuser-{price}-{quantity}",
            password="testpass",
            phone="+79991234567",
            address="Test Address",
            email="x123@ctmol.ru"
            )

            product = Product.objects.create(
                name=f"HypProduct-{price}",
                price=price,
                quantity=quantity + 100,  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                image=SimpleUploadedFile('TestOrders.jpg', img_bytes, 'image/jpeg')
            )

            cart = Cart.objects.create(user=user)
            CartItem.objects.create(cart=cart, product=product, quantity=quantity)

            self.client.force_login(user)
            delivery_time = timezone.localtime() + timezone.timedelta(hours=3, minutes=1)

            response = self.client.post(
                reverse('orders:checkout'),
                data={
                    'delivery_date': delivery_time.strftime('%Y-%m-%dT%H:%M'),
                    'use_profile_address':False,
                    'address': 'Hypothesis Test Address'
                },
                follow=True
            )

            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.assertEqual(response.status_code, 200)
            self.assertEqual(
                Order.objects.count(), 1,
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ quantity={quantity}, price={price}. –û—Ç–≤–µ—Ç: {response.content.decode()}"
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã
            order = Order.objects.first()
            self.assertEqual(
                order.total_price,
                price * quantity,
                f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {price} * {quantity} ‚â† {order.total_price}"
            )

    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        # –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ –ë–î
        Order.objects.all().delete()
        CartItem.objects.all().delete()
        Cart.objects.all().delete()
        Product.objects.all().delete()
        CustomUser.objects.all().delete()

